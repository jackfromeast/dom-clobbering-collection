import os
import re

# Directory containing the library files
input_directory = 'domc-gadgets'
output_file = 'table-rq1.tex'

# Initialize the LaTeX table content
latex_table_content = r"""
\begin{table*}[!t]
\centering
\scriptsize
\caption{A selective list of zero-day gadgets found by \sys in high-profile client-side libraries with over 1,000 stars on GitHub.}
\label{table:rq1-zero-day-gadgets}
\vspace{5pt}
\setlength{\tabcolsep}{2pt}
\begin{tabular}{cccccccp{0pt}p{0.45\textwidth}}
\toprule
 \multirow{2}{*}{\textbf{Library}} &
 \multirow{2}{*}{\textbf{\# of Stars}} &
 \multirow{2}{*}{\textbf{Version}} &
 \multirow{2}{*}{\textbf{Conseq.}} &
 \multirow{2}{*}{\textbf{Status}} &
 \multicolumn{1}{c}{\textbf{\thething}} &
 \multicolumn{1}{c}{\textbf{\sys}} & &
 \multirow{2}{*}{\textbf{Exploits Generated by \sys}} \\
 \cmidrule(lr){6-7}
 & & & & & Det./Exp. & Det./Exp. & \\
\midrule
"""

def convert_stars(stars_str):
    if 'K' in stars_str:
        return int(float(stars_str.replace('K', '')) * 1000)
    elif 'M' in stars_str:
        return int(float(stars_str.replace('M', '')) * 1000000)
    else:
        try:
            return int(stars_str.replace(',', ''))  # For cases without 'K' or 'M'
        except ValueError:
            return 0  # Default to 0 if conversion fails

# Function to extract metadata from a file
def extract_metadata(file_path):
    with open(file_path, 'r') as file:
        content = file.read()
    metadata = {}
    lines = content.split('\n')
    for line in lines:
        if line.startswith("+ Library:"):
            metadata['Library'] = line.split(": ")[1]
        elif line.startswith("+ Stars:"):
            stars_str = line.split(": ")[1]
            metadata['Stars'] = stars_str  # Store original stars string
            metadata['Stars_numeric'] = convert_stars(stars_str)  # Store numeric value for sorting
        elif line.startswith("+ Version:"):
            metadata['Version'] = line.split(": ")[1]
        elif line.startswith("+ Payload:"):
            payload = line.split(": ")[1]
            
            payload = payload.replace(r"\require", r"\textbackslash require")
            payload = payload.replace("```", '')
            payload = payload.replace(">", '\\textgreater ')
            payload = payload.replace('$', '\\$')
            payload = payload.replace('{', '\\{}')
            payload = payload.replace('}', '\\}')

            if "addtoany" in payload:
                payload = re.sub(r'https://addtoany(\S+)', 'https://addtoany.attack.com', payload)
                
            payload = re.sub(r'https://\w{3}\.\w{3,4}\.\w{3}', 'https://attack.com', payload)
            metadata['Payload'] = payload

        elif line.startswith("+ Impact:"):
            metadata['Impact'] = line.split(": ")[1]
        elif line.startswith("+ Foundby:"):
            metadata['Foundby'] = line.split(": ")[1]
        elif line.startswith("+ CVE:"):
            metadata['CVE'] = line.split(": ")[1]
        elif line.startswith("+ Status:"):
            metadata['Status'] = line.split(": ")[1]
    
    # Ensure Stars_numeric is set
    if 'Stars_numeric' not in metadata:
        metadata['Stars_numeric'] = 0

    return metadata

# Collect metadata for all files
metadata_list = []
for filename in sorted(os.listdir(input_directory)):
    if filename.endswith('.md'):
        file_path = os.path.join(input_directory, filename)
        metadata = extract_metadata(file_path)
        if metadata:
            metadata_list.append(metadata)

# Sort metadata list by Stars_numeric (high to low)
metadata_list.sort(key=lambda x: x['Stars_numeric'], reverse=True)

# Generate the LaTeX table content from sorted metadata
for metadata in metadata_list:
    latex_table_content += (
        f"{metadata['Library']} & "
        f"{metadata.get('Stars', 'N/A')} & "  # Use the original stars string
        f"{metadata.get('Version', 'N/A')} & "
        f"{metadata['Impact']} & "
        f"{metadata['CVE'] if metadata.get('CVE', 'N/A') != 'N/A' else metadata.get('Status', 'N/A')} & "
        f"\\Circle & "  # Adjust as needed for detection (assuming empty Circle)
        f"\\CIRCLE & &"  # Adjust as needed for exploitation (assuming filled Circle)
        f"\\tightcode{{{metadata['Payload']}}} \\\\ \n"
    )

# Finalize the LaTeX table
latex_table_content += r"""
\bottomrule
\end{tabular}
\vspace{5pt}
\end{table*}
"""

# Write the content to table.tex
with open(output_file, 'w') as file:
    file.write(latex_table_content)

print("table-rq1.tex has been generated successfully.")
